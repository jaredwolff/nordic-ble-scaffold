/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.1 */

#ifndef PB_COMMAND_PB_H_INCLUDED
#define PB_COMMAND_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _event_type {
    event_type_command = 0,
    event_type_response = 1
} event_type;

typedef enum _event_code {
    event_code_set_red_led = 0,
    event_code_set_green_led = 1,
    event_code_ret_blue_led = 2
} event_code;

/* Struct definitions */
typedef PB_BYTES_ARRAY_T(64) event_data_t;
typedef struct _event {
    event_type type;
    event_code code;
    event_data_t data;
} event;


/* Helper constants for enums */
#define _event_type_MIN event_type_command
#define _event_type_MAX event_type_response
#define _event_type_ARRAYSIZE ((event_type)(event_type_response+1))

#define _event_code_MIN event_code_set_red_led
#define _event_code_MAX event_code_ret_blue_led
#define _event_code_ARRAYSIZE ((event_code)(event_code_ret_blue_led+1))


/* Initializer values for message structs */
#define event_init_default                       {_event_type_MIN, _event_code_MIN, {0, {0}}}
#define event_init_zero                          {_event_type_MIN, _event_code_MIN, {0, {0}}}

/* Field tags (for use in manual encoding/decoding) */
#define event_type_tag                           1
#define event_code_tag                           2
#define event_data_tag                           3

/* Struct field encoding specification for nanopb */
#define event_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    type,              1) \
X(a, STATIC,   SINGULAR, UENUM,    code,              2) \
X(a, STATIC,   SINGULAR, BYTES,    data,              3)
#define event_CALLBACK NULL
#define event_DEFAULT NULL

extern const pb_msgdesc_t event_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define event_fields &event_msg

/* Maximum encoded size of messages (where known) */
#define event_size                               70

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
